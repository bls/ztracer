// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Registers.proto

#ifndef PROTOBUF_Registers_2eproto__INCLUDED
#define PROTOBUF_Registers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ztrace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Registers_2eproto();
void protobuf_AssignDesc_Registers_2eproto();
void protobuf_ShutdownFile_Registers_2eproto();


enum Reg {
  REG_INVALID_ = 0,
  REG_EDI = 1,
  REG_ESI = 2,
  REG_EBP = 3,
  REG_ESP = 4,
  REG_EBX = 5,
  REG_EDX = 6,
  REG_ECX = 7,
  REG_EAX = 8,
  REG_SEG_CS = 9,
  REG_SEG_SS = 10,
  REG_SEG_DS = 11,
  REG_SEG_ES = 12,
  REG_SEG_FS = 13,
  REG_SEG_GS = 14,
  REG_EFLAGS = 15,
  REG_EIP = 16,
  REG_AL = 17,
  REG_AH = 18,
  REG_AX = 19,
  REG_CL = 20,
  REG_CH = 21,
  REG_CX = 22,
  REG_DL = 23,
  REG_DH = 24,
  REG_DX = 25,
  REG_BL = 26,
  REG_BH = 27,
  REG_BX = 28,
  REG_BP = 29,
  REG_SI = 30,
  REG_DI = 31,
  REG_SP = 32,
  REG_FLAGS = 33,
  REG_IP = 34,
  REG_MM0 = 35,
  REG_MM1 = 36,
  REG_MM2 = 37,
  REG_MM3 = 38,
  REG_MM4 = 39,
  REG_MM5 = 40,
  REG_MM6 = 41,
  REG_MM7 = 42,
  REG_EMM0 = 43,
  REG_EMM1 = 44,
  REG_EMM2 = 45,
  REG_EMM3 = 46,
  REG_EMM4 = 47,
  REG_EMM5 = 48,
  REG_EMM6 = 49,
  REG_EMM7 = 50,
  REG_XMM0 = 51,
  REG_XMM1 = 52,
  REG_XMM2 = 53,
  REG_XMM3 = 54,
  REG_XMM4 = 55,
  REG_XMM6 = 56,
  REG_XMM7 = 57,
  REG_YMM0 = 58,
  REG_YMM1 = 59,
  REG_YMM2 = 60,
  REG_YMM3 = 61,
  REG_YMM4 = 62,
  REG_YMM5 = 63,
  REG_YMM6 = 64,
  REG_YMM7 = 65
};
bool Reg_IsValid(int value);
const Reg Reg_MIN = REG_INVALID_;
const Reg Reg_MAX = REG_YMM7;
const int Reg_ARRAYSIZE = Reg_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reg_descriptor();
inline const ::std::string& Reg_Name(Reg value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reg_descriptor(), value);
}
inline bool Reg_Parse(
    const ::std::string& name, Reg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reg>(
    Reg_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace ztrace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ztrace::Reg>() {
  return ztrace::Reg_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Registers_2eproto__INCLUDED
