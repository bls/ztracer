##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := 

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := ZTracer

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
# OBJECT_ROOTS := 

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

EXTRA_LIBS := -llog4cpp -lsnappy -lprotobuf

# Add this for OSX to find libraries installed with homebrew.
EXTRA_LPATHS := -L/usr/local/lib

##############################################################
#
##############################################################

##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

#debugtrace.test: $(OBJDIR)debugtrace$(PINTOOL_SUFFIX) $(TESTAPP)
#	$(RM) -f $(OBJDIR)debugtrace.makefile.copy
#	$(PIN) -t $(OBJDIR)debugtrace$(PINTOOL_SUFFIX) -silent -instruction -memory \
#	  -- $(TESTAPP) makefile $(OBJDIR)debugtrace.makefile.copy
#	$(CMP) makefile $(OBJDIR)debugtrace.makefile.copy
#	$(RM) $(OBJDIR)debugtrace.makefile.copy


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

ZTRACER_OBJS = $(OBJDIR)ZTrace.pb$(OBJ_SUFFIX) \
               $(OBJDIR)Registers.pb$(OBJ_SUFFIX) \
               $(OBJDIR)ZTraceMain$(OBJ_SUFFIX) \
               $(OBJDIR)ZTracer$(OBJ_SUFFIX) \
               $(OBJDIR)Log$(OBJ_SUFFIX) \
               $(OBJDIR)ThreadData$(OBJ_SUFFIX) \
               $(OBJDIR)MicroEventLog$(OBJ_SUFFIX) \
               $(OBJDIR)Helpers$(OBJ_SUFFIX) \
               $(OBJDIR)TraceMicroEvent$(OBJ_SUFFIX) \
               $(OBJDIR)TraceRegisters$(OBJ_SUFFIX) \
               $(OBJDIR)TraceDisassembly$(OBJ_SUFFIX) \
               $(OBJDIR)TraceMalloc$(OBJ_SUFFIX) \
               $(OBJDIR)TraceModules$(OBJ_SUFFIX) \
               $(OBJDIR)MemoryMap$(OBJ_SUFFIX) 

$(OBJDIR)ZTracer$(PINTOOL_SUFFIX): $(ZTRACER_OBJS)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $(^:$(OBJDIR)dummy=) $(TOOL_LPATHS) $(EXTRA_LPATHS) $(TOOL_LIBS) $(EXTRA_LIBS)

ZTrace.pb.cpp ZTrace.pb.h Registers.pb.cpp Registers.pb.h: ZTrace.proto
	protoc --cpp_out=. ZTrace.proto Registers.proto
	mv ZTrace.pb.cc ZTrace.pb.cpp
	mv Registers.pb.cc Registers.pb.cpp
	protoc --python_out=tools/ztrace ZTrace.proto Registers.proto
	protoc --python_out=oldtools ZTrace.proto Registers.proto

